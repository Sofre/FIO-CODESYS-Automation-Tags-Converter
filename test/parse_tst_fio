import csv
import re
import os

def infer_data_type(address, data_type_field=None):
    if data_type_field:
        dt = data_type_field.lower()
        if dt in ['bool', 'boolean']:
            return "Bool"
        elif dt in ['int', 'integer']:
            return "Int"
        elif dt in ['dint', 'doubleint']:
            return "DInt"
        elif dt in ['real', 'float', 'double']:
            return "Real"
        else:
            return "Unknown"

    if address.startswith("%IX") or address.startswith("%QX"):
        return "Bool"
    elif address.startswith("%IW") or address.startswith("%QW"):
        return "Int"
    elif address.startswith("%ID") or address.startswith("%QD"):
        return "DInt"
    elif address.startswith("%MD"):
        return "Real"
    else:
        return "Unknown"

def parse_factoryio_csv(file_path):
    inputs = []
    outputs = []

    with open(file_path, newline='', encoding='utf-8-sig') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            variable = row.get("Name") or row.get("Variable")
            io_type = row.get("Type", "").capitalize()
            data_type_field = row.get("Data Type")

            if not variable or not io_type:
                continue

            variable = variable.strip()
            data_type = infer_data_type("", data_type_field)

            entry = {
                "Variable": variable,
                "Type": io_type,
                "Data Type": data_type,
                "Channel": 0 if io_type.lower() == 'input' else 1,
                # IEC_Address and BitIndex will be added
            }

            if io_type.lower() == 'input':
                inputs.append(entry)
            elif io_type.lower() == 'output':
                outputs.append(entry)

    # Assign IEC addresses
    for idx, item in enumerate(inputs):
        byte = idx // 8
        bit = idx % 8
        item["BitIndex"] = bit
        item["IEC_Address"] = f"%IX{byte}.{bit}"

    for idx, item in enumerate(outputs):
        byte = idx // 8
        bit = idx % 8
        item["BitIndex"] = bit
        item["IEC_Address"] = f"%QX{byte}.{bit}"

    return inputs + outputs

def save_parsed_tags(tags, output_file):
    with open(output_file, 'w', newline='') as csvfile:
        fieldnames = ["Variable", "Type", "Data Type", "IEC_Address", "Channel", "BitIndex"]
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for item in tags:
            writer.writerow(item)
    print(f"Parsed and saved tags to: {output_file}")

def export_codesys_mapping(tags, filename):
    with open(filename, 'w', newline='') as csvfile:
        writer = csv.writer(csvfile)

        # Write header
        writer.writerow(["//CoDeSys Mapping Export V1.2"])
        writer.writerow(["//Mapped variable,//Parameter name @ counter in device,//Unit,//Description,//IEC address,//Device name"])
        writer.writerow(["//Important: change only first, third or fourth column in Excel or add variable name before first"])

        # Group by channel
        channels = {}
        for tag in tags:
            ch = tag['Channel']
            channels.setdefault(ch, []).append(tag)

        for ch in sorted(channels.keys()):
            rw1 = ['', f'Channel {ch}', '', '', f'%I{"B" if ch == 0 else "Q"}{ch}0', 'Modbus_TCP_Server']
            rw1[3] = 'Read Discrete Inputs' if ch == 0 else 'Write Multiple Coils'
            writer.writerow(rw1)

            rw2 = ['', f'Channel {ch}[0]', '', rw1[3], rw1[4], rw1[5]]
            writer.writerow(rw2)

            for tag in channels[ch]:
                var_name = tag['Variable']
                bit_index = tag['BitIndex']
                bit_counter = f"Bit{bit_index}"
                if ch == 1:
                    bit_counter += "@1"

                row = [
                    var_name,
                    bit_counter,
                    '',
                    f"0x{bit_index:04X}",
                    tag['IEC_Address'],
                    'Modbus_TCP_Server'
                ]
                writer.writerow(row)

    print(f"CoDeSys mapping exported to: {filename}")

if __name__ == "__main__":
    input_path = "C:/Users/Duki/codesys-xml-autogen/data/tags.csv"
    parsed_output_path = "C:/Users/Duki/codesys-xml-autogen/data/new_tags.csv"
    export_output_path = "C:/Users/Duki/codesys-xml-autogen/data/codesys_mapping_export.csv"

    # Step 1: Parse factoryio CSV
    tags = parse_factoryio_csv(input_path)

    # Step 2: Save parsed tags
    save_parsed_tags(tags, parsed_output_path)

    # Step 3: Export to CoDeSys mapping format
    export_codesys_mapping(tags, export_output_path)
